/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "DSC PowerSeries Virtual Keypad Feedback v1.0"
// #HINT ""
#DEFINE_CONSTANT	csKEYPADTEXT		"901"
#DEFINE_CONSTANT	csKEYPADCURSOR	"902"
#DEFINE_CONSTANT	csKEYPADLED			"903"
#DEFINE_CONSTANT	csBEEPSTATUS		"904"
#DEFINE_CONSTANT	csTONESTATUS		"905"
#DEFINE_CONSTANT	csBUZZSTATUS		"906"

#DEFINE_CONSTANT	csENDCHAR				"\x0D\x0A"

#DEFINE_CONSTANT	ciLINE1					0x30
#DEFINE_CONSTANT	ciLINE2					0x31

#DEFINE_CONSTANT	ciTONESCALE			100//seconds
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
// #PRINT_TO_TRACE
// #ENABLE_STACK_CHECKING
// #ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
BUFFER_INPUT	From_Device[250];

DIGITAL_OUTPUT	Beep_On, Tone_On, Buzz_On;
ANALOG_OUTPUT	Cursor_Style, Cursor_Line, Cursor_Position;
STRING_OUTPUT Line_Text_1, Line_Text_2;
ANALOG_OUTPUT	LED[9];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iFlag1, iTemp1, iTemp2, a, iLED[9], iBuzzTime, iBeepCount, iA, iToneConst,
				iToneNumBeeps, iToneInterval, iB;
STRING	sTemp[250], sTempLine[32], sLine1[32], sLine2[32], sTemp1[16], sTemp2[16];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
Function fwBuzzTime(INTEGER fiBuzzTime)
{
	wait(fiBuzzTime, wBuzzTime)
	{
		Buzz_On = 0;
	}
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
CHANGE From_Device
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(1)
		{
			sTemp = gather(csENDCHAR, From_Device);
			if(find(csKEYPADTEXT, sTemp) = 1)
			{
				if(byte(sTemp, 4) = ciLINE1)
				{
					iTemp1 = atoi(mid(sTemp, 5, 2)) + 1;
					iTemp2 = atoi(mid(sTemp, 7, 2));
					sTempLine = mid(sTemp, 9, iTemp2);
					if(len(sTempLine) > 16)
					{
						sTemp1 = left(sTempLine, 16);
						sTemp2 = right(sTempLine, len(sTempLine) - 16);
					}
					else
					{
						sTemp1 = sTempLine;
						sTemp2 = "";
					}
					if((len(sTemp1) > 0) && (sLine1 <> sTemp1))
					{
						sLine1 = sTemp1;
						Line_Text_1 = sLine1;
					}
					if((len(sTemp2) > 0) && (sLine2 <> sTemp2))
					{
						sLine2 = sTemp2;
						Line_Text_2 = sLine2;
					}
				}
				else if(byte(sTemp, 4) = ciLINE2)
				{
					iTemp1 = atoi(mid(sTemp, 5, 2));
					iTemp2 = atoi(mid(sTemp, 7, 2));
					sTempLine = mid(sTemp, 9, iTemp2);
					if(len(sTempLine) > 16)
					{
						sTemp1 = left(sTempLine, 16);
						sTemp2 = right(sTempLine, len(sTempLine) - 16);
					}
					else
					{
						sTemp1 = "";
						sTemp2 = sTempLine;
					}
					if((len(sTemp1) > 0) && (sLine1 <> sTemp1))
					{
						sLine1 = sTemp1;
						Line_Text_1 = sLine1;
					}
					if((len(sTemp2) > 0) && (sLine2 <> sTemp2))
					{
						sLine2 = sTemp2;
						Line_Text_2 = sLine2;
					}
				}
				sTempLine = "";
				iTemp1 = 0;
				iTemp2 = 0;
			}
			else if(find(csKEYPADCURSOR, sTemp) = 1)
			{
				Cursor_Style = atoi(mid(sTemp, 4, 1));
				Cursor_Line = atoi(mid(sTemp, 5, 1));
				Cursor_Position = atoi(mid(sTemp, 6, 2));
			}
			else if(find(csKEYPADLED, sTemp) = 1)
			{
				iTemp1 = byte(sTemp, 4) - 0x30;
				iTemp2 = byte(sTemp, 5);
				if(iTemp1 <= 9)
				{
					iLED[iTemp1] = iTemp2;
					LED[iTemp1] = iTemp2;
				}
			}
			else if(find(csBEEPSTATUS, sTemp) = 1)
			{
				iBeepCount = atoi(mid(sTemp, 4, 3));
				for(iB = 1 to iBeepCount)
				{
					Beep_On = 1;
					delay(10);
					Beep_On = 0;
					delay(10);
				}
			}
			else if(find(csBUZZSTATUS, sTemp) = 1)
			{
				iBuzzTime = atoi(mid(sTemp, 4, 3)) * 100;
				Buzz_On = 1;
				call fwBuzzTime(iBuzzTime);
			}
			else if(find(csTONESTATUS, sTemp) = 1)
			{
				iToneConst = atoi(mid(sTemp, 4, 1));
				iToneNumBeeps = atoi(mid(sTemp, 5, 1));
				iToneInterval = atoi(mid(sTemp, 6, 2)) * ciTONESCALE;
				if(iToneNumBeeps = 0)
				{
					Tone_On = iToneConst;
				}
				else
				{
					for(iA = 1 to iToneNumBeeps)
					{
						Tone_On = 1;
						delay(iToneInterval);
						Tone_On = 0;
						delay(iToneInterval);
					}
				}
			}
		}
		iFlag1 = 0;
	}
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	iFlag1 = 0;
	Line_Text_1 = sLine1;
	Line_Text_2 = sLine2;
	for(a = 1 to 9)
	{
		LED[a] = iLED[a];
	}
}
