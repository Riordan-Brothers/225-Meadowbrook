/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "DSC PowerSeries Partition Control v1.0"
// #HINT ""
#DEFINE_CONSTANT	ciKEYENTER	11
#DEFINE_CONSTANT	ciKEYCLEAR	12
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	Arm_Away, Arm_Stay, Arm_w_No_Entry_Delay, Disarm, Keypad[12];
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT	From_Device[2000];

DIGITAL_OUTPUT	Armed_Away, Armed_Stay, Armed_Away_No, Armed_Stay_No, Ready, Not_Ready,
								Ready_to_Force, Alarm, Zone_in_Alarm, Zone_Tamper, Entry_Delay, Exit_Delay,
								Invalid_Access, Disarmed, Failed_Arm, User_Open, User_Close, Special_Open,
								Special_Close, Partial_Close, Trouble_LED_On, Trouble_LED_Off, Need_Code;
// ANALOG_OUTPUT 
STRING_OUTPUT	Code_Text, Code_Stars_Text, User_Number_Text, To_Queue;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER	Partition_Number;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Partition_Number
	propValidUnits =	unitDecimal;
	propDefaultUnit =	unitDecimal;
	propBounds = 1d, 8d;
	propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iCodeNeeded, iFlag1, iCommand, iZAlarm, iZTamper, iPartReady, iPartNotReady,
				iPartForce, iTemp1, iCodeLen;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING	sTemp[25], sCode[12], sStars[12], sTemp1[250];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function sfCheckSum(STRING fsTemp)
{
	INTEGER	fiA, fiTemp;
	
	fiTemp = 0;
	for(fiA = 1 to Len(fsTemp))
	{
		fiTemp = fiTemp + byte(fsTemp, fiA);
	}
	if(fiTemp > 0x100)
	{
		fiTemp = fiTemp mod 0x100;
	}
	makestring(fsTemp, "%s%02X\x0D\x0A", fsTemp, fiTemp);
	
	Return (fsTemp);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Arm_Away
{
	INTEGER iTemp;
	
	iTemp = Partition_Number;
	makestring(sTemp, "030%d", iTemp);
	To_Queue = sfCheckSum(sTemp);
}

PUSH Arm_Stay
{
	INTEGER iTemp;
	
	iTemp = Partition_Number;
	makestring(sTemp, "031%d", iTemp);
	To_Queue = sfCheckSum(sTemp);
}

PUSH Arm_w_No_Entry_Delay
{
	INTEGER iTemp;
	
	iTemp = Partition_Number;
	makestring(sTemp, "032%d", iTemp);
	To_Queue = sfCheckSum(sTemp);
}

PUSH Disarm
{
	if(len(sCode) >= 4)
	{
		if(len(sCode) = 4)
		{
			sCode = sCode + "00";
		}
		else if(len(sCode) = 5)
		{
			sCode = sCode + "0";
		}
		makestring(sTemp, "040%d%s", Partition_Number, sCode);
		To_Queue = sfCheckSum(sTemp);
		sCode = "";
		sStars = "";
		Code_Text = sCode;
		Code_Stars_Text = sStars;
	}
}

PUSH Keypad
{
	INTEGER	iTemp;
	
	iTemp = getlastmodifiedarrayindex();
	if(iTemp = ciKEYENTER)
	{
		if((iCodeNeeded = 1) && (len(sCode) >= 4))
		{
			if(len(sCode) = 4)
			{
				sCode = sCode + "00";
			}
			else if(len(sCode) = 5)
			{
				sCode = sCode + "0";
			}
			makestring(sTemp, "200%d%s", Partition_Number, sCode);
			To_Queue = sfCheckSum(sTemp);
			sCode = "";
			sStars = "";
			Code_Text = sCode;
			Code_Stars_Text = sStars;
			iCodeNeeded = 0;
			Need_Code = iCodeNeeded;
		}
	}
	else if(iTemp = ciKEYCLEAR)
	{
		sCode = "";
		sStars = "";
		Code_Text = sCode;
		Code_Stars_Text = sStars;
	}
	else
	{
		if(len(sCode) < 6)
		{
			iTemp = iTemp - 1;
			makestring(sCode, "%s%d", sCode, iTemp);
			makestring(sStars, "%s*", sStars);
			Code_Text = sCode;
			Code_Stars_Text = sStars;
		}
	}
}

CHANGE From_Device
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(find("\x0D\x0A", From_Device))
		{
			sTemp1 = remove("\x0D\x0A", From_Device);
			iCommand = atoi(left(sTemp1, 3));
			switch(iCommand)
			{
				case(900): //Need Code
				{
					iCodeNeeded = 1;
					iCodeLen = atoi(mid(sTemp1, 5, 1));
					Need_Code = iCodeNeeded;
				}
				case(601): //Zone assigned to this partition in alarm
				{
					iZAlarm = 1;
					Zone_in_Alarm = iZAlarm;
				}
				case(602): //Zone assigned to this partition alarm restore
				{
					iZAlarm = 0;
					Zone_in_Alarm = iZAlarm;
				}
				case(603): //Zone assigned to this partition in tamper
				{
					iZTamper = 1;
					Zone_Tamper = iZTamper;
				}
				case(604): //Zone assigned to this partition tamper restore 
				{
					iZTamper = 0;
					Zone_Tamper = iZTamper;
				}
				case(650): //Partition Ready
				{
					iPartReady = 1;
					iPartNotReady = 0;
					iPartForce = 0;
					Alarm = 0;
					Exit_Delay = 0;
					Entry_Delay = 0;
					Ready_to_Force = iPartForce;
					Not_Ready = iPartNotReady;
					Ready = iPartReady;
				}
				case(651): //Partition Not Ready
				{
					iPartReady = 0;
					iPartNotReady = 1;
					iPartForce = 0;
					Ready_to_Force = iPartForce;
					Ready = iPartReady;
					Not_Ready = iPartNotReady;
				}
				case(652): //Partition Armed
				{
					iTemp1 = atoi(mid(sTemp1, 5, 1));
					Exit_Delay = 0;
					if(iTemp1 = 0) //Mode is Armed Away
					{
						Exit_Delay = 0;
						Entry_Delay = 0;
						Disarmed = 0;
						Armed_Stay = 0;
						Armed_Away_No = 0;
						Armed_Stay_No = 0;
						Armed_Away = 1;
					}
					else if(iTemp1 = 1) //Mode is Armed Stay
					{
						Exit_Delay = 0;
						Entry_Delay = 0;
						Disarmed = 0;
						Armed_Away_No = 0;
						Armed_Stay_No = 0;
						Armed_Away = 0;
						Armed_Stay = 1;
					}
					else if(iTemp1 = 2) //Mode is Armed Away No Delay
					{
						Exit_Delay = 0;
						Entry_Delay = 0;
						Disarmed = 0;
						Armed_Stay_No = 0;
						Armed_Away = 0;
						Armed_Stay = 0;
						Armed_Away_No = 1;
					}
					else if(iTemp1 = 3) //Mode is Armed Stay No Delay
					{
						Exit_Delay = 0;
						Entry_Delay = 0;
						Disarmed = 0;
						Armed_Away_No = 0;
						Armed_Away = 0;
						Armed_Stay = 0;
						Armed_Stay_No = 1;
					}
				}
				case(653): //Partition Ready to Force Arm
				{
					Exit_Delay = 0;
					Entry_Delay = 0;
					iPartReady = 0;
					iPartNotReady = 0;
					iPartForce = 1;
					Alarm = 0;
					Ready = iPartReady;
					Not_Ready = iPartNotReady;
					Ready_to_Force = iPartForce;
				}
				case(654): //Partition in Alarm
				{
					iPartReady = 0;
					iPartForce = 0;
					Exit_Delay = 0;
					Entry_Delay = 0;
					Ready_to_Force = iPartForce;
					Ready = iPartReady;
					Alarm = 1;
				}
				case(655): //Partition Disarmed
				{
					Exit_Delay = 0;
					Entry_Delay = 0;
					Armed_Away_No = 0;
					Armed_Away = 0;
					Armed_Stay = 0;
					Armed_Stay_No = 0;
					Entry_Delay = 0;
					Disarmed = 1;
				}
				case(656): //Partition Exit Delay
				{
					Exit_Delay = 1;
				}
				case(657): //Partition Entry Delay
				{
					Entry_Delay = 1;
				}
				case(670): //Partition Invalid Access Code
				{
					pulse(100, Invalid_Access);
				}
				case(672): //Partition Failed to Arm
				{
					pulse(100, Failed_Arm);
				}
				case(700): //Partition User Close
				{
					User_Open = 0;
					User_Close = 1;
					User_Number_Text = mid(sTemp1, 5, 4);
				}
				case(701): //Partition Special Close
				{
					Special_Open = 0;
					Special_Close = 1;
				}
				case(750): //Partition User Open
				{
					User_Close = 0;
					User_Open = 1;
					User_Number_Text = mid(sTemp1, 5, 4);
				}
				case(751): //Partition Special Open
				{
					Special_Close = 0;
					Special_Open = 1;
				}
				case(702): //Partition Partial Close
				{
					pulse(100, Partial_Close);
				}
				case(840): //Partition Trouble LED On
				{
					Trouble_LED_Off = 0;
					Trouble_LED_On = 1;
				}
				case(841): //Partition Trouble LED Off
				{
					Trouble_LED_On = 0;
					Trouble_LED_Off = 1;
				}
			}
		}
		iFlag1 = 0;
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	iCodeNeeded = 0;
	iFlag1 = 0;
}
